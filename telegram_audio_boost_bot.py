#!/usr/bin/env python3
# telegram_audio_boost_bot.py
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ,
# –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 4 –æ–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
# "–ê—É–¥–∏–æ +10 dB", "–ê—É–¥–∏–æ +20 dB", "–ê—É–¥–∏–æ + –í–∏–¥–µ–æ +10 dB", "–ê—É–¥–∏–æ + –í–∏–¥–µ–æ +20 dB",
# —Å–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

import os
import re
import logging
import subprocess
import tempfile
import threading
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    ConversationHandler, CallbackContext
)
import yt_dlp
from yt_dlp.utils import ExtractorError

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Regex –¥–ª—è URL
URL_REGEX = re.compile(r'https?://\S+')

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_OPTION = 1

# –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ
busy_chats = set()
busy_lock = threading.Lock()

# –ò—â–µ–º YouTube-—Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
def extract_youtube_url(text: str):
    for url in URL_REGEX.findall(text):
        if 'youtube.com' in url or 'youtu.be' in url:
            return url
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫ —è –±—É–¥—É —É—Å–∏–ª–∏–≤–∞—Ç—å –∑–≤—É–∫."
    )

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
def ask_option(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    url = extract_youtube_url(update.message.text)
    if not url:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        return ConversationHandler.END

    with busy_lock:
        if chat_id in busy_chats:
            update.message.reply_text("‚ùå –Ø —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return ConversationHandler.END
        busy_chats.add(chat_id)

    context.user_data['url'] = url
    buttons = [
        ['–ê—É–¥–∏–æ +10 dB', '–ê—É–¥–∏–æ +20 dB'],
        ['–ê—É–¥–∏–æ + –í–∏–¥–µ–æ +10 dB', '–ê—É–¥–∏–æ + –í–∏–¥–µ–æ +20 dB']
    ]
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=markup)
    return CHOOSING_OPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
def process_choice(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    choice = update.message.text.strip()
    url = context.user_data.get('url')
    update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...", reply_markup=ReplyKeyboardRemove())

    is_video = '–í–∏–¥–µ–æ' in choice
    match = re.search(r'\+(\d+)', choice)
    db_value = int(match.group(1)) if match else 20

    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ yt-dlp
            ydl_opts = {'quiet': True}
            if is_video:
                ydl_opts.update({
                    'format': 'bestvideo[height<=240]+bestaudio/best[height<=240]',
                    'merge_output_format': 'mp4',
                    'outtmpl': os.path.join(tmpdir, '%(id)s.%(ext)s'),
                })
                ext = 'mp4'
            else:
                ydl_opts.update({
                    'format': 'bestaudio',
                    'outtmpl': os.path.join(tmpdir, '%(id)s.%(ext)s'),
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }]
                })
                ext = 'mp3'

            ydl = yt_dlp.YoutubeDL(ydl_opts)
            try:
                info = ydl.extract_info(url, download=True)
            except ExtractorError as e:
                logger.error("YT-DLP extract error: %s", e)
                # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ YouTube
                if 'Sign in to confirm' in str(e):
                    update.message.reply_text(
                        "‚ùå –†–æ–ª–∏–∫ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –µ–≥–æ —Å–∫–∞—á–∞—Ç—å."
                    )
                else:
                    update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ."
                    )
                return ConversationHandler.END

            input_file = ydl.prepare_filename(info)
            if not is_video:
                input_file = os.path.splitext(input_file)[0] + '.mp3'

            output_file = os.path.join(tmpdir, f"boosted_{info['id']}.{ext}")
            if is_video:
                cmd = [
                    'ffmpeg', '-y', '-i', input_file,
                    '-vf', 'scale=-2:240',
                    '-filter:a', f'volume={db_value}dB',
                    '-c:v', 'libx264', '-preset', 'veryfast',
                    '-c:a', 'aac', '-b:a', '192k',
                    output_file
                ]
            else:
                cmd = [
                    'ffmpeg', '-y', '-i', input_file,
                    '-filter:a', f'volume={db_value}dB',
                    output_file
                ]
            subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            with open(output_file, 'rb') as f:
                if is_video:
                    context.bot.send_video(chat_id=chat_id, video=f, supports_streaming=True)
                else:
                    context.bot.send_audio(chat_id=chat_id, audio=f)

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
        context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        with busy_lock:
            busy_chats.discard(chat_id)
        context.user_data.clear()

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
def cancel(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    with busy_lock:
        busy_chats.discard(chat_id)
    context.user_data.clear()
    update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    if not TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return
    updater = Updater(TOKEN)
    updater.bot.delete_webhook(drop_pending_updates=True)
    dp = updater.dispatcher
    conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r'https?://'), ask_option)],
        states={
            CHOOSING_OPTION: [MessageHandler(
                Filters.regex(r'^(–ê—É–¥–∏–æ \+10 dB|–ê—É–¥–∏–æ \+20 dB|–ê—É–¥–∏–æ \+ –í–∏–¥–µ–æ \+10 dB|–ê—É–¥–∏–æ \+ –í–∏–¥–µ–æ \+20 dB)$'),
                process_choice
            )]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(conv)
    # –ù–∞—á–∏–Ω–∞–µ–º polling —Å –¥—Ä–æ–ø–æ–º —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    updater.start_polling(drop_pending_updates=True)
    updater.idle()

if __name__ == '__main__':
    main()
