#!/usr/bin/env python3
# telegram_audio_boost_bot.py
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube-–≤–∏–¥–µ–æ, —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Ö,
# —É—Å–∏–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –≤ 20 dB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

import os
import re
import logging
import subprocess
import tempfile
import threading
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, run_async
import yt_dlp

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã yt-dlp
YTDL_OPTS = {
    'format': 'bestvideo+bestaudio',
    'merge_output_format': 'mp4',
    'quiet': True,
}

# Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
URL_REGEX = re.compile(r'https?://\S+')

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —á–∞—Ç–æ–≤ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
busy_chats = set()
busy_lock = threading.Lock()


def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ, –∏ —è –≤–µ—Ä–Ω—É —Ñ–∞–π–ª —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º –∑–≤—É–∫–æ–º (√ó2, ‚âà20 dB)."
    )


def extract_youtube_url(text: str):
    # –ò—â–µ–º URL –≤ —Ç–µ–∫—Å—Ç–µ –∏ –æ—Ç–±–∏—Ä–∞–µ–º YouTube
    for url in URL_REGEX.findall(text):
        if 'youtube.com' in url or 'youtu.be' in url:
            return url
    return None


@run_async
def process_link(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è–ª –ª–∏ —á–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É
    with busy_lock:
        if chat_id in busy_chats:
            update.message.reply_text(
                "‚ùå –Ø —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        busy_chats.add(chat_id)

    try:
        url = extract_youtube_url(update.message.text)
        if not url:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ.")
            return

        status_msg = update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        with tempfile.TemporaryDirectory() as tmpdir:
            # –®–∞–≥ 1: –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
            ydl_opts = YTDL_OPTS.copy()
            ydl_opts['outtmpl'] = os.path.join(tmpdir, '%(id)s.%(ext)s')
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                input_file = ydl.prepare_filename(info)

            # –®–∞–≥ 2: –£—Å–∏–ª–∏—Ç—å –∞—É–¥–∏–æ –Ω–∞ 20 dB
            output_file = os.path.join(tmpdir, f"boosted_{info['id']}.mp4")
            cmd = [
                'ffmpeg', '-y', '-i', input_file,
                '-filter:a', 'volume=20dB',
                '-c:v', 'copy', '-c:a', 'aac', '-b:a', '192k',
                output_file
            ]
            subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_file, 'rb') as f:
                context.bot.send_document(chat_id=chat_id, document=f)

        status_msg.delete()

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        # –£–±–∏—Ä–∞–µ–º —á–∞—Ç –∏–∑ –∑–∞–Ω—è—Ç—ã—Ö
        with busy_lock:
            busy_chats.discard(chat_id)


def main():
    if not TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return

    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, process_link))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
