#!/usr/bin/env python3
# telegram_audio_boost_bot.py
# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube-–≤–∏–¥–µ–æ,
# —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç (–∞—É–¥–∏–æ –∏–ª–∏ –∞—É–¥–∏–æ+–≤–∏–¥–µ–æ),
# —Å–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞, —É—Å–∏–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –≤ 20 dB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

import os
import re
import logging
import subprocess
import tempfile
import threading
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    ConversationHandler, CallbackContext, run_async
)
import yt_dlp

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
URL_REGEX = re.compile(r'https?://\S+')

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_FORMAT = 1

# –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ
busy_chats = set()
busy_lock = threading.Lock()


def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ, –∏ —è —Å–ø—Ä–æ—à—É —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )


def extract_youtube_url(text: str):
    for url in URL_REGEX.findall(text):
        if 'youtube.com' in url or 'youtu.be' in url:
            return url
    return None


def ask_format(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    url = extract_youtube_url(update.message.text)
    if not url:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        return ConversationHandler.END

    with busy_lock:
        if chat_id in busy_chats:
            update.message.reply_text(
                "‚ùå –Ø —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
            )
            return ConversationHandler.END
        busy_chats.add(chat_id)

    context.user_data['url'] = url
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    buttons = [['–ê—É–¥–∏–æ —Ç–æ–ª—å–∫–æ'], ['–ê—É–¥–∏–æ + –í–∏–¥–µ–æ']]
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=markup
    )
    return CHOOSING_FORMAT


@run_async
def process_choice(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    choice = update.message.text
    url = context.user_data.get('url')
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...", reply_markup=ReplyKeyboardRemove())

    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ yt-dlp
            ydl_opts = {'quiet': True}
            if choice == '–ê—É–¥–∏–æ —Ç–æ–ª—å–∫–æ':
                ydl_opts.update({
                    'format': 'bestaudio',
                    'outtmpl': os.path.join(tmpdir, '%(id)s.%(ext)s'),
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }]
                })
                ext = 'mp3'
            else:
                ydl_opts.update({
                    'format': 'bestvideo[height<=240]+bestaudio/best[height<=240]',
                    'merge_output_format': 'mp4',
                    'outtmpl': os.path.join(tmpdir, '%(id)s.%(ext)s'),
                })
                ext = 'mp4'

            # –°–∫–∞—á–∏–≤–∞–µ–º
            ydl = yt_dlp.YoutubeDL(ydl_opts)
            info = ydl.extract_info(url, download=True)
            input_file = ydl.prepare_filename(info)
            if choice == '–ê—É–¥–∏–æ —Ç–æ–ª—å–∫–æ':
                input_file = os.path.splitext(input_file)[0] + '.mp3'

            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ+–∞—É–¥–∏–æ, —É—Å–∏–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤–Ω—É—Ç—Ä–∏ MP4
            if choice == '–ê—É–¥–∏–æ + –í–∏–¥–µ–æ':
                output_file = os.path.join(tmpdir, f"boosted_{info['id']}.mp4")
                cmd = [
                    'ffmpeg', '-y', '-i', input_file,
                    '-filter:a', 'volume=20dB',
                    '-c:v', 'copy', '-c:a', 'aac', '-b:a', '192k',
                    output_file
                ]
                subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            else:
                # –î–ª—è MP3 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ
                output_file = os.path.join(tmpdir, f"boosted_{info['id']}.mp3")
                cmd = [
                    'ffmpeg', '-y', '-i', input_file,
                    '-filter:a', 'volume=20dB',
                    output_file
                ]
                subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(output_file, 'rb') as f:
                context.bot.send_document(chat_id=chat_id, document=f)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
        context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        with busy_lock:
            busy_chats.discard(chat_id)
        context.user_data.clear()

    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    with busy_lock:
        busy_chats.discard(chat_id)
    context.user_data.clear()
    update.message.reply_text(
        '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main():
    if not TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return

    updater = Updater(TOKEN)
    dp = updater.dispatcher

    conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.text & ~Filters.command, ask_format)],
        states={CHOOSING_FORMAT: [MessageHandler(Filters.regex('^(–ê—É–¥–∏–æ —Ç–æ–ª—å–∫–æ|–ê—É–¥–∏–æ \+ –í–∏–¥–µ–æ)$'), process_choice)]},
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(conv)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
